type Query {
  me: User
  users: [User]
  user(id: ID!): User
  quizzes: [Quiz]
  quiz(id: ID!): Quiz
  quiz_type(id: ID!): QuizType
  quiz_types: [QuizType]
  attempt(id: ID!): Attempt
  attempts: [Attempt]
  bookmarks(id: ID!): [Bookmark]
}

type Mutation {
  createUser(
    full_name: String!
    username: String!
    email_address: String!
    password: String!
  ): AuthPayload!
  login(username: String!, password: String!): AuthPayload!
  updateUserDetails(full_name: String, email_address: String): AuthPayload!
  updatePassword(old_password: String!, new_password: String!): AuthPayload!
  createQuiz(
    title: String!
    description: String
    quiz_type: String!
    is_public: Boolean
    flashcards: [FlashcardInput]
  ): Quiz!
  createBookmark(quiz_id: ID!): Bookmark!
  createAttempt(quiz_id: ID!, user_score: Int!, max_score: Int!): Attempt!
}

type AuthPayload {
  user: User!
  token: String!
}

type User {
  id: ID!
  full_name: String!
  username: String!
  email_address: String!
  password: String!
  date_created: String!
  quizzes: [Quiz]
  bookmarks: [Quiz]
}

type Quiz {
  id: ID!
  user: User
  title: String!
  description: String
  quiz_type: QuizType
  is_public: Boolean!
  is_active: Boolean!
  date_created: String!
  flashcards: [Flashcard]
  flashcards_count: Int
  attempts: [Attempt]
  attempts_count: Int
  bookmarks_count: Int
}

type Flashcard {
  id: ID!
  question: String
  correct_answer: String
  wrong_answer_a: String
  wrong_answer_b: String
}

input FlashcardInput {
  question: String
  correct_answer: String
  wrong_answer_a: String
  wrong_answer_b: String
}

type Attempt {
  id: ID!
  quiz: Quiz!
  user: User!
  user_score: Int!
  max_score: Int!
  date_created: String!
}

type Bookmark {
  id: ID!
  quiz: Quiz!
  user: User!
}

type QuizType {
  id: ID!
  title: String!
}
